name: Hunter Pie CI

on:
  push:
    branches:
      - master
      - development
defaults:
  run:
    shell: bash

jobs:

  build:
    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Omit Native
      run: sed '/Native/{N;d;}' -i HunterPie.sln

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the applications
      shell: pwsh
      run: msbuild -m /t:Restore

    - name: Build HunterPie.UI for manifest
      shell: pwsh
      run: msbuild HunterPie.UI /p:Configuration=Debug

    - name: Generate UI manifest
      run: |
        nuget install Microsoft.Net.Compilers.Toolset -OutputDirectory packages -Version 3.9.0-2.final
        CSI="packages/Microsoft.Net.Compilers.Toolset.3.9.0-2.final/tasks/net472/csi.exe"

        mkdir -p HunterPie.UI/tools
        $CSI scripts/genVisualStudioToolsManifest.csx

    - name: Build the apps
      shell: pwsh
      run: msbuild -m /p:Configuration=Release

    - name: Build Debug for NuGet
      shell: pwsh
      run: msbuild -m /p:Configuration=Debug

    # Upload the builds for next job and debugging
    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        # Don't know if this should be unique to the tag/branch/PR
        name: Hunter Pie Release
        path: ./**/bin/*

    - name: Upload manifests
      uses: actions/upload-artifact@v2
      with:
        name: Hunter Pie Manifests
        path: ./**/tools/*

  pre-release:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - project: "HunterPie"
          prefix: "hp"
          binary: "exe"
        - project: "HunterPie.Core"
          prefix: "core"
          binary: "dll"
        - project: "HunterPie.UI"
          prefix: "ui"
          binary: "dll"
        - project: "Update"
          prefix: "up"
          binary: "exe"

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Hunter Pie Release

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Hunter Pie Manifests

    - name: Determine new tag
      env:
        PROJECT: ${{ matrix.project }}
        PREFIX: ${{ matrix.prefix }}
      run: scripts/getGitTag.sh

    - name: Prep binaries for release
      if: env.GIT_TAG != ''
      env:
        PROJECT: ${{ matrix.project }}
      run: |
        mkdir zip
        cp -r $PROJECT/bin/Release zip/HunterPie
        cd zip
        7z a -tzip $PROJECT.zip HunterPie/* -r

    - name: Setup NuGet.exe
      if: env.GIT_TAG != '' && matrix.binary == 'dll'
      uses: nuget/setup-nuget@v1
      with:
        nuget-version: latest

    - name: Push to NuGet
      if: env.GIT_TAG != '' && matrix.binary == 'dll'
      env:
        PROJECT: ${{ matrix.project }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: scripts/push2NuGet.sh

    - name: Pre-Release
      if: env.GIT_TAG != ''
      env:
        PROJECT: ${{ matrix.project }}
        BINARY: ${{ matrix.binary }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "$BINARY" = "dll" ]
        then
          BIN="zip/HunterPie/$PROJECT.dll"
        else
          BIN="zip/$PROJECT.zip"
        fi

        gh release create $GIT_TAG --title "Release $GIT_TAG" --prerelease $BIN

    - name: Upload version as artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.project }}_Version
        path: ./version

  release:
    needs: pre-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: Hunter Pie Release

    - name: Download build artifacts
      uses: actions/download-artifact@v2

    - name: Zip Hunter Pie & Update
      run: |
        mkdir zip
        mv HunterPie/bin/Release zip/HunterPie
        mv -f Update/bin/Release/* zip/HunterPie
        cd zip
        zip -r HunterPie.zip HunterPie/
        cd ..
        mkdir bin
        cp zip/HunterPie.zip HunterPie.Core/bin/Release/HunterPie.Core.dll HunterPie.UI/bin/Release/HunterPie.UI.dll bin

    # This is embarassing
    - name: Write release notes
      run: |
        touch notes.md

        HunterPie=$(cat HunterPie_Version/version)
        Core=$(cat HunterPie.Core_Version/version)
        UI=$(cat HunterPie.UI_Version/version)
        Update=$(cat Update_Version/version)

        if [ -n "$HunterPie" ]
        then
          echo "HunterPie bumped up to $HunterPie" >> notes.md
        fi

        if [ -n "$Core" ]
        then
          echo "HunterPie.Core bumped up to $Core" >> notes.md
        fi

        if [ -n "$UI" ]
        then
          echo "HunterPie.UI bumped up to $UI" >> notes.md
        fi

        if [ -n "$Update" ]
        then
          echo "Update bumped up to $Update" >> notes.md
        fi

    - name: Create release with binaries
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: scripts/makeRelease.sh
